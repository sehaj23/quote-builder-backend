import { Router } from 'express';
import { ItemController } from '@/controllers/ItemController.js';
import { ItemService } from '@/services/ItemService.js';
import { ItemRepository } from '@/repositories/ItemRepository.js';
import { authenticateToken } from '@/middleware/auth.js';
const router = Router({ mergeParams: true });
const itemRepository = new ItemRepository();
const itemService = new ItemService(itemRepository);
const itemController = new ItemController(itemService);
router.get('/search', authenticateToken, itemController.searchItems.bind(itemController));
router.get('/category/:category', authenticateToken, itemController.getItemsByCategory.bind(itemController));
router.get('/', authenticateToken, itemController.getItemsByCompany.bind(itemController));
router.post('/', authenticateToken, itemController.createItem.bind(itemController));
export const individualItemRouter = Router();
individualItemRouter.get('/:id', authenticateToken, itemController.getItemById.bind(itemController));
individualItemRouter.put('/:id', authenticateToken, itemController.updateItem.bind(itemController));
individualItemRouter.delete('/:id', authenticateToken, itemController.deleteItem.bind(itemController));
export const categoryRouter = Router({ mergeParams: true });
categoryRouter.get('/', authenticateToken, itemController.getCategories.bind(itemController));
export default router;
//# sourceMappingURL=itemRoutes.js.map